<?php

namespace App\Controllers;
use App\Models\PublicModel;
use CodeIgniter\HTTP\RedirectResponse;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class PublicController extends BaseController
{
    private PublicModel $pbl;
    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->pbl= model(PublicModel::class);
    }
    public function MainList($id=false,$pg=0):string|RedirectResponse{
        $page['data']["title"]= "Электронный научный архив МелГУ: Главаня страница";

        if($this->session->has("collectionsFilter"))
            $page['data']['filter']= $this->session->get("MainFilter");

        $page['data']['edSections']= $this->pbl->getSectionsList();

        $page['pageContent']= view("public/main",$page['data']);
        return view("public/page",$page);
    }
    public function ChapterList($id=false,$pg=0):string|RedirectResponse{
        $page['data']["title"]= "Электронный научный архив МелГУ: ";

        if($this->session->has("collectionsFilter"))
            $page['data']['filter']= $this->session->get("MainFilter");

        $page['data']['edSections']= $this->pbl->getChapterList($id);
        $page['data']['TitleSections']= $this->pbl->getTitleSection($id);
        $page['data']['edCollections']= $this->pbl->getCollectionsList($id);

        $l = $this->pbl->db->table('sections')->where(['parent'=>$id])->get()->getResult();
        $count=  $this->pbl->db
            ->table("publications")
            ->get()->getNumRows();
        $maxPages= ceil($count / 20);

        if($maxPages<$pg) $pg = $maxPages;
        if($pg<1) $pg = 1;

        $page['data']['paginator']= view("admin/template/paginator",[
            "maxPages"=>$maxPages,
            "currentPage"=>$pg,
            "baseLink"=>base_url("/collections/$id/page-"),
        ]);

        $list = $this->pbl->db->table('publications')
            ->where("JSON_CONTAINS(sections, '\"".$id."\"', '$')")
            ->limit(20,($pg-1)*20)
            ->get()->getResult();


        if(empty($l)){
            $page['data']['publications']= view("public/publications",["list"=>$list,"paginator"=>$page['data']['paginator']]);
            $page['pageContent']= view("public/subchapter",$page['data']);
            return view("public/page",$page);
        }
        else{
            $page['data']['publications']= view("public/publications",["list"=>$list,"paginator"=>$page['data']['paginator']]);
            $page['pageContent']= view("public/chapter",$page['data']);
            return view("public/page",$page);
        }

    }
    public function browse($search='',$id=false,$pg=0,):string|RedirectResponse
    {
        $page['data']["title"] = "Электронный научный архив МелГУ: ";
        $page['data']['search'] = $search;
        if ($this->session->has("MainFilter"))
            $page['data']['filter'] = $this->session->get("MainFilter");
        $page['data']['filterSection'] = view("public/FilterSection", $page['data']);
        $page['data']['Publicate']= $this->pbl->getPublication((array)($page['data']['filter']??[]));

        $page['pageContent']= view("public/browse",$page['data']);
        return view("public/page",$page);
    }

    public function CollectList($id=false,$pg=0):string|RedirectResponse{
        $page['data']["title"]= "Электронный научный архив МелГУ: ";

        if($this->session->has("collectionsFilter"))
            $page['data']['filter']= $this->session->get("MainFilter");

        $count=  $this->pbl->db
            ->table("publications")
            ->get()->getNumRows();
        $maxPages= ceil($count / 20);

        if($maxPages<$pg) $pg = $maxPages;
        if($pg<1) $pg = 1;

        $page['data']['paginator']= view("admin/template/paginator",[
            "maxPages"=>$maxPages,
            "currentPage"=>$pg,
            "baseLink"=>base_url("/collections/$id/page-"),
        ]);

        $list = $this->pbl->db->table('publications')
            ->where("JSON_CONTAINS(collections, '\"".$id."\"', '$')")
            ->limit(20,($pg-1)*20)
            ->get()->getResult();

        $page['data']['edCollections']= $this->pbl->getTitleCollection($id);
        $page['data']['publications']= view("public/publications",["list"=>$list,"paginator"=>$page['data']['paginator']]);
        $page['pageContent']= view("public/collections",$page['data']);
        return view("public/page",$page);
    }
    public function CollectionsList($id=false,$pg=0):string|RedirectResponse{
        $page['data']["title"]= "Электронный научный архив МелГУ: ";

        if($this->session->has("collectionsFilter"))
            $page['data']['filter']= $this->session->get("MainFilter");

        $page['data']['edCollections']= $this->pbl->getCollectionsList($id);
        $page['data']['TitleChapter']= $this->pbl->getSubTitleChapter($id);


        $page['pageContent']= view("public/subchapter",$page['data']);
        return view("public/page",$page);
    }
    public function Publication($id=false,$pg=0):string|RedirectResponse{
        /* meta */
        $page['data']["title"]= "Электронный научный архив МелГУ: ";

        /* получение публикацию */
        $publication= $this->db->table("publications")
            ->where("id",$id)
            ->get()
            ->getFirstRow();

        /* проверка если публикации с таким id нет */
        if(empty($publication))
            return redirect()->to(base_url("/"));

        $page['data']['Publicate']= $this->pbl->getPublication($id);


        // подготовка источника
        if(!empty($publication->source))
            $publication->source= $this->db
                ->table("sources")
                ->where("id",$publication->source)
                ->get()->getFirstRow();

        // подготовка разделов
        $publication->sections= $this->db->table("sections")
            ->where("id IN (".implode(",",$publication->sections).")")
            ->orderBy("parent","asc")
            ->get()->getResult();
        /* вывод */
        $page['pageContent']= view("public/publication",["publication"=>$publication]);
        return view("public/page",$page);
    }

    public function setFilter($search){
        if(!$this->pbl->hasAuth()) return json_encode(['message'=>"success denied"]);
        $filter= (object)$this->request->getVar('filter');
        $this->session->set("MainFilter",$filter);
        return redirect()->to(base_url("/browse/$search"));
    }

}
