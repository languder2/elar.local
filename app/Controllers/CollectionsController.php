<?php

namespace App\Controllers;
use App\Models\CollectionsModel;
use CodeIgniter\HTTP\RedirectResponse;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Psr\Log\LoggerInterface;

class CollectionsController extends BaseController
{
    private CollectionsModel $clm;
    public function initController(RequestInterface $request, ResponseInterface $response, LoggerInterface $logger)
    {
        parent::initController($request, $response, $logger); // TODO: Change the autogenerated stub
        $this->clm= model(CollectionsModel::class);
    }
    public function CollectionsList($clm= false):string|RedirectResponse{

        if($this->clm->hasAuth() === false)
            return view("admin/template/page",["pageContent"=>view("admin/User/Auth")]);
        //dd($this->model->createPassword("aRf8zKl1s1"));
        $page['data']['includes']=(object)[
            'js'=>["/js/admin/change-visible.js"],
            'css'=>["/css/admin/collections.css","/css/admin/sections.css"],
        ];
        $page['data']["title"]= "Control Panel: Коллекции";
        $page['menuTop']= view("admin/template/menuTop",["menu"=>$this->model->getMenu("admin")]);

        if($this->session->has("collectionsFilter"))
            $page['data']['filter']= $this->session->get("collectionsFilter");
        $page['data']['filterSection']= view("admin/collections/FilterSection",$page['data']);

        $page['data']['edCollection']= $this->clm->getCollectionsList((array)($page['data']['filter']??[]));
        if($this->session->has("message"))
            $page['data']['message']= $this->session->getFlashdata("message");

        $page['pageContent']= view("admin/collections/ListView",$page['data']);
        return $clm?$page['pageContent']:view(ADMIN."/template/page",$page);
    }
    public function form($op= "add",$pID= false,$modal= false):string|RedirectResponse{
        if(!$this->clm->hasAuth()) return redirect()->to(base_url(ADMIN));
        if($op!=="add" && $pID===false) return redirect()->to(base_url("/admin/collections/"));
        $page['data']['includes']=(object)[
            'js'=>[],
            'css'=>["/css/admin/collections.css"],
        ];
        $page['data']["title"] = "Коллекция : ".(($op=="add")?"Создать":": Редактирование");
        $page['menuTop']= view("admin/template/menuTop",["menu"=>$this->model->getMenu("admin")]);
        $page['data']['op']= $op;
        $page['data']['pID']= $pID;

        if($this->session->has("form")){
            $page['data']['form']= (object)$this->session->getFlashdata("form");
            $page['data']['validator']= $this->session->getFlashdata("validator");
            $page['data']['errors'] = $this->clm->getFormErrors($page['data']['validator']);
        }
        elseif($op=="edit")
            $page['data']['form']= $this->clm->db->table('collections')->where(["id"=>$pID])->get()->getFirstRow();

        $page['pageContent']= view("admin/collections/FormView",$page['data']);
        return $modal?$page['pageContent']:view(ADMIN."/template/page",$page);
    }

    public function formProcessing(){
        if(!$this->clm->hasAuth()) return redirect()->to(base_url(ADMIN));
        $form= (object)$this->request->getVar('form');
        $rules= [
            //'form.code' => 'required|is_unique[edProfiles.code]',
            'form.title' => 'required|is_unique[collections.title]',
        ];
      if($form->op=="edit") $rules['form.title']= "required|is_unique[collections.title, id, ".$form->id."]";
        $messages= [
            'form.title'=>[
                "required"=>"required",
                "is_unique"=>"Коллекция с именем $form->title уже существует"
            ],
        ];
        $inputs = $this->validate($rules,$messages);
        if (!$inputs) {
            $form= json_decode(json_encode($form), FALSE);
            $this->session->setFlashdata("form",$form);
            $this->session->setFlashdata("validator",$this->validator);
            if($form->op=="add")
                return redirect()->to(base_url("/admin/collections/add"));
            else
                return redirect()->to(base_url("/admin/collections/edit/".$form->id));
        }
        if($form->op=="add") $this->clm->CollectionsAdd($form);
        if($form->op=="edit") $this->clm->CollectionsChange($form);
        return redirect()->to(base_url("/admin/collections/"));
    }

    public function delete($id= false)
    {
        if (!$this->clm->hasAuth()) return redirect()->to(base_url(ADMIN));
        if (!$id) return redirect()->to(base_url("/admin/collections/"));
        $collection = $this->clm->dbGetRow("collections", ["id" => $id]);
        if ($collection->cnt == "") {
        $this->session->setFlashdata("message", (object)["type" => "success", "class" => "callout-success", "message" => "Коллекция удалена: #$collection->id: $collection->title"]);
        $this->clm->dbDelete("collections", ["id" => $id]);
        }
        else
            $this->session->setFlashdata("message", (object)["type" => "error", "class" => "callout-error", "message" => "Коллекция не может быть удалена так как в ней есть записи"]);
        return redirect()->to(base_url("/admin/collections/"));
    }
    public function changeVisible():string|bool{
        if(!$this->clm->hasAuth()) return json_encode(['message'=>"success denied"]);
        $form= (object)$this->request->getVar();
        $this->clm->dbUpdateFiled("collections",["display"=>(string)$form->display],["id"=>$form->id]);
        return true;
    }
    public function setFilter(){
        if(!$this->clm->hasAuth()) return json_encode(['message'=>"success denied"]);
        $filter= (object)$this->request->getVar('filter');
        $this->session->set("collectionsFilter",$filter);
        return redirect()->to(base_url("/admin/collections/"));
    }
/*Public*/

}
